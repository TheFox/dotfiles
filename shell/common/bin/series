#!/usr/bin/env ruby

# Rename tv series files to a common format.
# I don't care about titles in file names.
# Just make the long file name shorter, readable.

# require 'pp'
require 'pathname'
require 'io/console'

EXTENSIONS = [
	'flv',
	'mp4',
]

class Series
	
	EPISODES = [
		/S([012][0-9])E([0123][0-9])/i,
		/S([0-9])E([012][0-9])/i,
		/S([012][0-9]) E([012][0-9])/i,
		
		/_([0-9]{1,2})x([0-9]{1,2})_/,
		/ ([0-9]{1,2})x([0-9]{1,2}) /,
		/ ([0-9]{1,2})x([0-9]{1,2})/,
		
		/-([0-9]{2})([0-9]{2})-/,
		/([12])([012][0-9])/,
		/ ([0-9]{2})-([0-9]{2}) /,
		
		/Staffel ([0-9]{1,2}) Folge ([0-9]{1,2})/,
	]
	
	def name
		''
	end
	
	def patterns
		[]
	end
	
	def filter(files)
		files.select do |file_path|
			keep = false
			patterns.each do |pattern|
				res = pattern.match(file_path.to_s)
				if res
					keep = true
					break
				end
			end
			keep
		end.map do |old_file_path|
			file_ext = old_file_path.extname
			new_file_path = old_file_path.basename(file_ext).to_s
			
			patterns.each do |pattern|
				new_file_path.gsub!(pattern, '')
			end
			
			episode = nil
			EPISODES.each do |epi|
				# puts "'#{epi}' '#{new_file_path}'"
				if res = epi.match(new_file_path)
					# pp res
					
					episode = 's%02de%02d' % [res[1].to_i, res[2].to_i]
					break
				end
			end
			if episode.nil?
				puts "episode pattern not found: '#{new_file_path}'"
				nil
			else
				new_file_path =
					name
					.gsub('%ext%', file_ext)
					.gsub('%epi%', episode)
				
				# puts "new_file_path '#{new_file_path}'"
				
				[old_file_path, Pathname.new(new_file_path)]
			end
		end.select do |file|
			!file.nil?
		end.to_h
	end
end

class AgentCarterSeries < Series
	def name
		'agent_carter_%epi%%ext%'
	end
	def patterns
		[
			/^Marvels.Agent.Carter/i,
		]
	end
end

class AgentsOfShieldSeries < Series
	def name
		'agents_of_shield_%epi%%ext%'
	end
	def patterns
		[
			/^Agents.of.SHIELD/i,
			/Agents.of.S.H.I.E.L.D/i,
			/^SHIELD/,
			/^tvp.shield/,
		]
	end
end

class AmericanDadSeries < Series
	def name
		'american_dad_%epi%%ext%'
	end
	def patterns
		[
			/^American.Dad/,
			/^ad/,
			/^gerad/,
		]
	end
end

class BlackMirrorSeries < Series
	def name
		'black_mirror_%epi%%ext%'
	end
	def patterns
		[
			/-black-mirror/i,
			/^blami/i,
			/^Black.Mirror/,
		]
	end
end

class BattlestarGalacticaSeries < Series
	def name
		'battlestar_galactica_%epi%%ext%'
	end
	def patterns
		[
			/^Battlestar.Galactica/i,
		]
	end
end

class CriminalMinds < Series
	def name
		'criminal_minds_%epi%%ext%'
	end
	def patterns
		[
			/^Criminal.Minds/i,
		]
	end
end

class DarkNet < Series
	def name
		'dark_net_%epi%%ext%'
	end
	def patterns
		[
			/^Dark.Net/i,
		]
	end
end

class ElementarySeries < Series
	def name
		'elementary_%epi%%ext%'
	end
	def patterns
		[
			/^Elementary/,
			/^sof-elementary-/,
			/^euhd-elementary-/,
		]
	end
end

class FamilyGuySeries < Series
	def name
		'family_guy_%epi%%ext%'
	end
	def patterns
		[
			/^....Family.?Guy/i,
			/^Family.Guy/i,
			/^Guy /,
			/^tvs-fg-ded-dl-ithd-x264/,
			/^isd-fgdxvid/,
		]
	end
end

class HannibalSeries < Series
	def name
		'hannibal_%epi%%ext%'
	end
	def patterns
		[
			/^Hannibal/,
		]
	end
end

class HowToGetAwayWithMurderSeries < Series
	def name
		'how_to_get_away_with_murder_%epi%%ext%'
	end
	def patterns
		[
			/^How.to.Get.Away.with.Murder/,
		]
	end
end

class LuciferSeries < Series
	def name
		'lucifer_%epi%%ext%'
	end
	def patterns
		[
			/^Lucifer/,
		]
	end
end

class MakingAMurderer < Series
	def name
		'making_a_murderer_%epi%%ext%'
	end
	def patterns
		[
			/^Making.a.Murderer/i,
		]
	end
end

class MrRobotSeries < Series
	def name
		'mr_robot_%epi%%ext%'
	end
	def patterns
		[
			/^Mr.Robot/,
		]
	end
end

class OrangeIsTheNewBlackSeries < Series
	def name
		'orange_is_the_new_black_%epi%%ext%'
	end
	def patterns
		[
			/^Orange.is.the.New.Black/i,
		]
	end
end

class OrphanBlackSeries < Series
	def name
		'orphan_black_%epi%%ext%'
	end
	def patterns
		[
			/^orphan black/,
			/^rsg-orphan-black/,
		]
	end
end

class PersonOfInterestSeries < Series
	def name
		'person_of_interest_%epi%%ext%'
	end
	def patterns
		[
			/^Person.of.Interest/i,
		]
	end
end

class RayDonovanSeries < Series
	def name
		'ray_donovan_%epi%%ext%'
	end
	def patterns
		[
			/^Ray.Donovan/i,
		]
	end
end

class RevengeSeries < Series
	def name
		'revenge_%epi%%ext%'
	end
	def patterns
		[
			/^Revenge/i,
		]
	end
end

class SiliconValleySeries < Series
	def name
		'silicon_valley_%epi%%ext%'
	end
	def patterns
		[
			/^Silicon.Valley/i,
		]
	end
end

class SuitsSeries < Series
	def name
		'suits_%epi%%ext%'
	end
	def patterns
		[
			/^rsg-suits/,
		]
	end
end

class TheClevelandShowSeries < Series
	def name
		'the_cleveland_show_%epi%%ext%'
	end
	def patterns
		[
			/^The.Cleveland.Show/i,
		]
	end
end

class TheHundredSeries < Series
	def name
		'the_100_%epi%%ext%'
	end
	def patterns
		[
			/^The.100/i,
		]
	end
end

class TheWalkingDeadSeries < Series
	def name
		'the_walking_dead_%epi%%ext%'
	end
	def patterns
		[
			/^The.Walking.Dead/i,
		]
	end
end

class TestSeries < Series
	def name
		'test_%epi%%ext%'
	end
	def patterns
		[
			/^mytest/i,
		]
	end
end

class Westworld < Series
	def name
		'westworld_%epi%%ext%'
	end
	def patterns
		[
			/^Westworld/,
		]
	end
end

classes = [
	AgentCarterSeries,
	AgentsOfShieldSeries,
	AmericanDadSeries,
	BattlestarGalacticaSeries,
	CriminalMinds,
	DarkNet,
	BlackMirrorSeries,
	ElementarySeries,
	FamilyGuySeries,
	HannibalSeries,
	HowToGetAwayWithMurderSeries,
	LuciferSeries,
	MakingAMurderer,
	MrRobotSeries,
	OrangeIsTheNewBlackSeries,
	OrphanBlackSeries,
	PersonOfInterestSeries,
	RayDonovanSeries,
	RevengeSeries,
	SiliconValleySeries,
	SuitsSeries,
	TheClevelandShowSeries,
	TheHundredSeries,
	TheWalkingDeadSeries,
	# TestSeries,
	Westworld,
]

dir_paths = ARGV.length > 0 ? ARGV : ['.']
dir_paths.map{ |p| Pathname.new(p).expand_path }.each do |dir_path|
	Dir.chdir(dir_path) do
		EXTENSIONS.each do |file_ext|
			files = dir_path.entries.select{ |p| p.file? && p.extname == ".#{file_ext}" }
			
			classes.each do |sclass|
				series = sclass.new
				series.filter(files).each do |old_file_path, new_file_path|
					
					if new_file_path.exist?
						puts "WARNING: file already exists: #{new_file_path}"
					else
						puts "  #{old_file_path}"
						puts "  #{new_file_path}"
						puts
						print 'rename? [y/N] '
						answer = STDIN.getch.strip.downcase
						if answer.length == 0
							answer = 'n'
						end
						puts "answer: '#{answer}' '#{answer.ord}'"
						
						case answer.ord
						when 121 # y
							puts 'ok, rename it'
							old_file_path.rename(new_file_path)
							files.delete(old_file_path)
						when 3, 4 # ctrl-c, ctrl-d
							exit 1
						else
							puts 'nothing done'
						end
						puts
					end
					
				end
			end
		end
	end
end
