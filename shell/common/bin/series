#!/usr/bin/env ruby

require 'pp'
require 'fileutils'
require 'io/console'

EXTENSIONS = [
	'flv',
	'mp4',
]

class Series
	
	REPLACEMENTS = {
	}
	EPISODES = [
		/S([012][0-9])E([0123][0-9])/i,
		/S([0-9])E([012][0-9])/i,
		/S([012][0-9]) E([012][0-9])/i,
		/-([0-9]{2})([0-9]{2})-/,
		/([12])([012][0-9])/,
		/ ([0-9]{2})-([0-9]{2}) /,
		/_([0-9]{1,2})x([0-9]{1,2})_/,
		/ ([0-9]{1,2})x([0-9]{1,2}) /,
	]
	
	def initialize
	end
	
	def name
		''
	end
	
	def patterns
		[]
	end
	
	def filter(files)
		files.select do |file_path|
			keep = false
			patterns.each do |pattern|
				#puts "check pattern #{pattern} => '#{file_path}'"
				res = pattern.match(file_path)
				if res
					#pp res
					keep = true
					break
				end
			end
			keep
		end.map do |old_file_path|
			file_ext = File.extname(old_file_path)
			new_file_path = old_file_path.clone
			new_file_path = File.basename(new_file_path, file_ext)
			
			#puts "ext: '#{file_ext}'"
			#puts "new A: '#{new_file_path}'"
			#puts "new A: '#{new_file_path}'"
			
			patterns.each do |pattern|
				new_file_path.gsub!(pattern, '')
			end
			REPLACEMENTS.each do |search, replacement|
				new_file_path.gsub!(search, replacement)
			end
			
			#puts "old A: '#{old_file_path}'"
			
			episode = nil
			EPISODES.each do |epi|
				if res = epi.match(new_file_path)
					#puts "#{res}"
					episode = 's%02de%02d' % [res[1].to_i, res[2].to_i]
					break
				end
			end
			if episode.nil?
				nil
			else
				#puts "new C: '#{name}'"
				
				new_file_path = name
				
				new_file_path.gsub!('%ext%', file_ext)
				new_file_path.gsub!('%epi%', episode)
				
				#puts "epi: '#{episode}'"
				
				[old_file_path, new_file_path]
			end
		end.select do |file|
			!file.nil?
		end.to_h
	end
end

class BlackMirrorSeries < Series
	def name
		'black_mirror_%epi%%ext%'
	end
	def patterns
		[
			/-black-mirror/i,
			/^blami/i,
		]
	end
end

class FamilyGuySeries < Series
	def name
		'family_guy_%epi%%ext%'
	end
	def patterns
		[
			/^....Family.?Guy/i,
			/^Family.Guy/i,
			/^Guy - /,
			/^tvs-fg-ded-dl-ithd-x264/,
			/^isd-fgdxvid/,
		]
	end
end

class HannibalSeries < Series
	def name
		'hannibal_%epi%%ext%'
	end
	def patterns
		[
			/^Hannibal/,
		]
	end
end

class MrRobotSeries < Series
	def name
		'mr_robot_%epi%%ext%'
	end
	def patterns
		[
			/^Mr.Robot/,
		]
	end
end

class SuitsSeries < Series
	def name
		'suits_%epi%%ext%'
	end
	def patterns
		[
			/^rsg-suits/,
		]
	end
end

classes = [
	BlackMirrorSeries,
	FamilyGuySeries,
	HannibalSeries,
	MrRobotSeries,
	SuitsSeries,
]

dir_paths = ARGV.length > 0 ? ARGV : ['.']
dir_paths.map{ |p| File.expand_path(p) }.each do |dir_path|
	#puts "path: #{dir_path}"
	
	Dir.chdir(dir_path) do
		EXTENSIONS.each do |file_ext|
			#puts "ext: #{file_ext}"
			
			files = Dir["*.#{file_ext}"]
			# files.each do |file_path|
			# 	puts "file: #{file_path}"
			# end
			
			classes.each do |sclass|
				#puts "sclass: #{sclass}"
				
				series = sclass.new
				filtered_files = series.filter(files)
				#puts "#{sclass} -> #{filtered_files}"
				filtered_files.each do |old_file_path, new_file_path|
					if !File.exist?(new_file_path)
						puts "#{old_file_path} => #{new_file_path}"
						print 'y/N? '
						#answer = STDIN.getc
						answer = STDIN.getch.strip.downcase
						answer = 'n' if answer.length == 0
						puts "answer: '#{answer}' '#{answer.ord}'"
						
						case answer.ord
						when 121 # y
							puts 'ok, rename it'
							FileUtils.mv(old_file_path, new_file_path)
							files.delete(old_file_path)
						when 3, 4 # ctrl-c, ctrl-d
							exit 1
						else
							puts 'nothing done'
						end
						puts
					end
				end
				
				#pp files.map{ |f| f.to_s }
				#pp files
			end
		end
	end
	
end
